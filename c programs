1.Selection Sort 
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
void Sort(int a[],int n){
    int i,j;
    for(i=0;i<n-1;i++){
        int max_index=i;
        for(j=i+1;j<n;j++){
            if(a[j]<a[max_index]){
                max_index=j;
            }
        }
            int temp=a[max_index];
            a[max_index]=a[i];
            a[i]=temp;
    }
    
}
int main(){
    int n;
    printf("enter number of elements:");
    scanf("%d",&n);
    int a[n];
    printf("enter elements :");
    int i;
    for(i=0;i<n;i++){
       a[i]=rand();
    }
    printf("elements before sorting:");
    for(i=0;i<n;i++){
        printf("%d ",a[i]);
    }
    printf("\n");
    clock_t start, end;
    double Cpu_time;
    start=clock();
    Sort(a,n);
    end=clock();
    printf("elements after sorting:");
    for(i=0;i<n;i++){
        printf("%d ",a[i]);
    }
    printf("\n");
    Cpu_time=(double)(end-start)/CLOCKS_PER_SEC;
    printf("cpu time used:%.2f",Cpu_time);
}
2.Quick Sort
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int partition(int a[], int low, int high){
    int pivot = a[low];
    int i = low, j = high, temp;

    while(i < j){
        while (a[i] <= pivot && i < high) i++;
        while (a[j] > pivot) j--;
        if(i < j){
            temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }
    }
    temp = a[low];
    a[low] = a[j];
    a[j] = temp;

    return j;
}

void quick(int a[], int low, int high){
    if(low < high){
        int j = partition(a, low, high);
        quick(a, low, j - 1);
        quick(a, j + 1, high);
    }
}

int main(){
    int n;
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int a[n];

    srand(time(NULL));
    for(int i = 0; i < n; i++)
        a[i] = rand() % 100;

    printf("\nBefore sorting:\n");
    for(int i = 0; i < n; i++)
        printf("%d ", a[i]);

    clock_t start = clock();
    quick(a, 0, n - 1);
    clock_t end = clock();

    printf("\nAfter sorting:\n");
    for(int i = 0; i < n; i++)
        printf("%d ", a[i]);

    double cpu_time_used = (double)(end - start) / CLOCKS_PER_SEC;
    printf("\nCPU time used: %.2f seconds\n", cpu_time_used);

    return 0;
}
3. Insertion Sort
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void insertionsort(int a[], int n){
    int i, key, j;
    for(i = 1; i < n; i++){
        key = a[i];
        j = i - 1;
        while(j >= 0 && a[j] > key){
            a[j + 1] = a[j];
            j--;
        }
        a[j + 1] = key;
    }
}

int main(){
    int n;
    clock_t start, end;
    double cpu;
    
    printf("Enter number of elements: ");
    scanf("%d", &n);
    int a[n];
    for(int i = 0; i < n; i++)
        a[i] = rand() % 100;

    printf("\nUnsorted array:\n");
    for(int i = 0; i < n; i++)
        printf("%d ", a[i]);
    printf("\n");

    start = clock();
    insertionsort(a, n);
    end = clock();

    printf("\nSorted array:\n");
    for(int i = 0; i < n; i++)
        printf("%d ", a[i]);
    printf("\n");

    cpu = (double)(end - start) / CLOCKS_PER_SEC;
    printf("CPU time used: %.2f seconds\n", cpu);

    return 0;
}
